#!/usr/bin/env python3

import argparse
import datetime
import os
import shutil

# Check whether the filename already contains a fucking date.
# In case it does, do not touch the file.

def organize_photos(source_directory: str, test = False) -> str:
	count = {}
	image_formats = [
		"3fr", "apng", "ari", "arw", "avif", "bay",	 "bmp",	  "braw", "cap",
		"cr2", "cr3",  "crw", "cur", "data", "dcr",	 "dcs",	  "dng",  "drf",
		"eip", "erf",  "fff", "gif", "gpr",	 "ico",	 "iiq",	  "jfif", "jpeg",
		"jpg", "k25",  "kdc", "kra", "mdc",	 "mef",	 "mos",	  "mrw",  "nef",
		"nrw", "obm",  "ora", "orf", "pef",	 "pjp",	 "pjpeg", "png",  "ptx",
		"pxn", "r3d",  "raf", "raw", "rw2",	 "rwl",	 "rwz",	  "sr2",  "srf",
		"srw", "svg",  "tif", "tif", "tiff"	 "webp", "x3f"
	]
	pattern = r"^(\d{4})-(\d{2})-(\d{2})_(\d{2}).(\d{2}).(\d{2})(.*)$"
	result = ""

	# Handle source folder
	if len(source_directory) == 0:
		current_folder = os.path.abspath(__file__)
		source_directory = os.path.dirname(current_folder)

	for file_name in os.listdir(source_directory):
		# Handle file information
		file_path = os.path.join(source_directory, file_name)
		info = get_info(file_path)
		file_extension = info["extension"]

		if os.path.isfile(file_path) and (file_extension in image_formats):
			# Handle the new file name
			file_name = info["creation"].isoformat(sep="_").replace(":", ".")
			year = f"{info['creation'].year:0>2d}"
			month = f"{info['creation'].month:0>2d}"

			# Set other useful variables
			full_file_name = file_name + f".{file_extension}"
			count[full_file_name] = 0

			# Handle the new path
			year_folder = os.path.join(source_directory, year)
			month_folder = os.path.join(source_directory, year, month)
			new_path = os.path.join(source_directory, year, month, full_file_name)

			# Keep track of the changes
			result += f"{file_path} -> {new_path}\n"

			if not test:
				# Create folders
				if not os.path.isdir(year_folder):
					os.mkdir(year_folder)

				if not os.path.isdir(month_folder):
					os.mkdir(month_folder)

				# Move file
				if os.path.isfile(new_path):
					count[full_file_name] += 1
					full_file_name = file_name + f"({count[full_file_name]})"
					full_file_name = full_file_name + f"{file_extension}"
					new_path = os.path.join(
						source_directory, year, month, full_file_name
					)


				shutil.move(file_path, new_path)

	return result

def get_info(source_path: str) -> dict:
	ctime = datetime.datetime.fromtimestamp(os.path.getctime(source_path))
	mtime = datetime.datetime.fromtimestamp(os.path.getmtime(source_path))
	size = os.path.getsize(source_path)
	name, extension = os.path.splitext(source_path)
	name = name.split("/")[-1]
	extension = extension[1:]

	# file full path
	# image width
	# width height
	# image aspect ration

	creation = ctime if ctime < mtime else mtime

	return {
		"name": name,
		"extension": extension,
		"size": size,
		"creation": creation,
	}

#--------------------------------------------------------------------------------

parser = argparse.ArgumentParser(
	prog="organize_photos",
	description="organizes the photos in a directory",
)
parser.add_argument(
	"source_directory",
	help="the directory where the photos to be organized are located",
	metavar="source_directory",
	type=str
)
parser.add_argument(
	"-d",
	"--dry",
	action="store_true",
	help="dry run"
)

args = parser.parse_args()
organize_photos(args.source_directory, args.dry)

